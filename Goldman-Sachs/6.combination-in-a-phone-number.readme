1.
class Solution {
    public List<String> letterCombinations(String digits) {

         List<String> list = new ArrayList<>();
        if(digits.length() == 0){
            return list;
        }
       
       String [] arr = {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
       int dig = Integer.parseInt(digits);
       

        backtrack(dig,arr,list,"");
        return list;
    }

    public static void backtrack(int digit,String[] arr,List<String> list,String ans){
        if(digit == 0){
            list.add(ans);
            return;
        }
        int n = digit % 10;
        String str = arr[n];
        for(int i =0;i < str.length();i++){
            backtrack(digit/10,arr,list,str.charAt(i) + ans);
        }
    }
}




2.
class Solution {
    public List<String> letterCombinations(String digits) {

         List<String> str = new ArrayList<>();
        if(digits.length() == 0){
            return str;
        }
        HashMap<Character,String> map = new HashMap<>();
        map.put('2',"abc");
        map.put('3',"def");
        map.put('4',"ghi");
        map.put('5',"jkl");
        map.put('6',"mno");
        map.put('7',"pqrs");
        map.put('8',"tuv");
        map.put('9',"wxyz");

        backtrack(digits,0,map,new StringBuilder(),str);
        return str;
    }

    public static void backtrack(String digits,int i,HashMap<Character,String> map,StringBuilder sb, List<String> str){
        if(i == digits.length()){
            str.add(sb.toString());
            return;
        }
        String curr = map.get(digits.charAt(i));
        for(int j =0;j < curr.length();j++){
            sb.append(curr.charAt(j));
            backtrack(digits,i+1,map,sb,str);
            sb.deleteCharAt(sb.length()-1);
        }
    }
}
